export declare type Nullish = null | undefined;
export declare type Action = {
    type: string;
    payload?: any;
};
export declare type State = Record<string, any>;
export declare type IdState = {
    id?: string | Nullish;
    ids: string[];
    all?: boolean;
    none?: boolean;
} & State;
export declare type MiddlewareFunction = (action: Action, state: State, context: any) => void;
export declare type StateAndChange = {
    state?: State;
    onChange?: MiddlewareFunction;
};
export declare type Modifier = (nodes: any[]) => any[];
declare type IdReducerFunctionsOptions = {
    isCarryForward?: boolean;
    isPartialToAll?: boolean;
} & Record<string, any>;
export declare type IdReducerFunctions = {
    onAddById: (id: string) => void;
    onRemoveById: (id: string) => void;
    onToggleById: (id: string) => void;
    onAddByIdRecursively: (ids: string[], options: IdReducerFunctionsOptions) => void;
    onRemoveByIdRecursively: (ids: string[]) => void;
    onToggleByIdRecursively: (id: string, options: IdReducerFunctionsOptions) => void;
    onAddByIdExclusively: (id: string) => void;
    onRemoveByIdExclusively: () => void;
    onToggleByIdExclusively: (id: string) => void;
    onToggleByIdShift: (id: string, options: IdReducerFunctionsOptions, modifier: Modifier) => void;
    onAddAll: (ids: string[]) => void;
    onRemoveAll: () => void;
    onToggleAll: (options: IdReducerFunctionsOptions) => void;
};
export {};
