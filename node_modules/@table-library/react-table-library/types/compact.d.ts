import * as React from 'react';
import { TableNode, TableProps, RowProps } from '@table-library/react-table-library/types/table';
import { ColumnSortProps } from '@table-library/react-table-library/types/sort';
import { ColumnSelectProps } from '@table-library/react-table-library/types/select';
import { ColumnTreeProps } from '@table-library/react-table-library/types/tree';
import { ColumnResizeProps } from '@table-library/react-table-library/types/resize';
import { ColumnHideProps } from '@table-library/react-table-library/types/hide';
export declare type Column = {
    label: string;
    renderCell: (node: TableNode) => React.ReactNode;
    footer?: string;
    resize?: ColumnResizeProps;
    sort?: ColumnSortProps;
    select?: ColumnSelectProps;
    tree?: ColumnTreeProps;
    pinLeft?: boolean;
    pinRight?: boolean;
    hide?: ColumnHideProps;
    cellProps?: Record<string, any>;
};
export declare type VirtualizedOptions = {
    rowHeight: number | ((item: TableNode, index: number) => number);
    itemCount?: number;
};
export declare type TableOptions = {
    renderBeforeTable?: () => React.ReactNode;
    renderAfterTable?: () => React.ReactNode;
};
export declare type RowOptions = {
    renderBeforeRow?: (node: TableNode) => React.ReactNode;
    renderAfterRow?: (node: TableNode) => React.ReactNode;
};
export declare type RowPropsAsObject = Omit<RowProps, 'item' | 'children'>;
export declare type CompactTableProps = TableProps & {
    columns: Column[];
    tableOptions?: TableOptions;
    rowProps?: RowPropsAsObject;
    rowOptions?: RowOptions;
    virtualizedOptions?: VirtualizedOptions;
};
export declare type NormalTableProps = CompactTableProps & {
    tableList: TableNode[];
};
export declare type VirtualizedTableProps = CompactTableProps & {
    tableList: TableNode[];
};
export declare type Internals = {
    index: number;
    style: any;
    data: {
        items: TableNode[];
    };
};
export declare type InternalsObject = {
    internals: Internals;
};
