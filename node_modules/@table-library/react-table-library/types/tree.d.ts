import * as React from 'react';
import { Nullish, State, IdReducerFunctions, Modifier } from '@table-library/react-table-library/types/common';
import { TableNode, GetRowProps } from '@table-library/react-table-library/types/table';
export declare enum TreeExpandClickTypes {
    RowClick = 0,
    ButtonClick = 1
}
export declare type TreeOptionsIcon = {
    margin?: string;
    size?: string;
    noIconMargin?: string;
    iconDefault?: React.ReactElement | Nullish;
    iconRight?: React.ReactElement | Nullish;
    iconDown?: React.ReactElement | Nullish;
};
export declare type TreeOptions = {
    isServer?: boolean;
    treeIcon?: TreeOptionsIcon;
    clickType?: TreeExpandClickTypes;
    indentation?: number;
    treeXLevel?: number;
    treeYLevel?: number;
};
export declare type TreeOptionsIconSound = {
    margin: string;
    size: string;
    noIconMargin: string;
    iconDefault: React.ReactElement | Nullish;
    iconRight: React.ReactElement | Nullish;
    iconDown: React.ReactElement | Nullish;
};
export declare type TreeOptionsSound = {
    isServer: boolean;
    treeIcon: TreeOptionsIconSound;
    clickType: TreeExpandClickTypes;
    indentation: number;
    treeXLevel: number;
    treeYLevel: number;
};
export declare type ColumnTreePropsObject = {
    treeIcon?: TreeOptionsIcon;
};
export declare type ColumnTreeProps = ColumnTreePropsObject | boolean;
export declare type CellTreeProps = {
    item: TableNode;
    treeIcon?: TreeOptionsIcon;
    children?: React.ReactNode;
};
export declare type Tree = {
    state: State;
    fns: IdReducerFunctions;
    options: TreeOptionsSound;
    _getRowProps: GetRowProps;
    modifier: Modifier;
    components: {
        CellTree: React.FunctionComponent<CellTreeProps>;
    };
};
